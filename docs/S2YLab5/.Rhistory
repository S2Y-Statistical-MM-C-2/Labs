xlab("") +
ylab("") +
labs(tile="Grid - Shape")
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/grid_scale.png",
width=500,height=400)
ukdf + geom_point(data = grid.mle.df,
aes(x=Long,y=Lat, col=Scale),size=6,
alpha=0.75,pch=15) +
scale_color_viridis()+
xlim(c(-1,1)) +
ylim(c(51,52)) +
xlab("") +
ylab("") +
labs(tile="Grid - Scale")
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/aurn_shape.png",
width=500,height=400)
ukdf + geom_point(data = aurn.mle.df,
aes(x=Long,y=Lat, col=Shape),size=6,pch=15) +
scale_color_viridis()+
xlim(c(-1,0.7)) +
ylim(c(51.3,51.7)) +
xlab("") +
ylab("")+
labs(tile="AURN - Shape")
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/aurn_scale.png",
width=500,height=400)
ukdf + geom_point(data = aurn.mle.df,
aes(x=Long,y=Lat, col=Scale),size=6,pch=15 +
scale_color_viridis()+
xlim(c(-1,0.7)) +
ylim(c(51.3,51.7)) +
xlab("") +
ylab("")+
labs(tile="AURN - Scale")
dev.off()
dev.off()
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/aurn_shape.png",
width=500,height=400)
ukdf + geom_point(data = aurn.mle.df,
aes(x=Long,y=Lat, col=Shape),size=6,pch=15) +
scale_color_viridis()+
xlim(c(-1,0.7)) +
ylim(c(51.3,51.7)) +
xlab("") +
ylab("")+
labs(title="AURN - Shape")
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/aurn_scale.png",
width=500,height=400)
ukdf + geom_point(data = aurn.mle.df,
aes(x=Long,y=Lat, col=Scale),size=6,pch=15 +
scale_color_viridis()+
xlim(c(-1,0.7)) +
ylim(c(51.3,51.7)) +
xlab("") +
ylab("")+
labs(title="AURN - Scale")
dev.off()
labs(title="AURN - Scale")
aurn.mle.df
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/aurn_scale.png",
width=500,height=400)
ukdf + geom_point(data = aurn.mle.df,
aes(x=Long,y=Lat, col=Scale),size=6,pch=15) +
scale_color_viridis()+
xlim(c(-1,0.7)) +
ylim(c(51.3,51.7)) +
xlab("") +
ylab("")+
labs(title="AURN - Scale")
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/grid_shape.png",
width=500,height=400)
ukdf + geom_point(data = grid.mle.df,
aes(x=Long,y=Lat, col=Shape),size=6,
alpha=0.75,pch=15) +
scale_color_viridis()+
xlim(c(-1,1)) +
ylim(c(51.3,51.7)) +
xlab("") +
ylab("") +
labs(tile="Grid - Shape")
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/grid_scale.png",
width=500,height=400)
ukdf + geom_point(data = grid.mle.df,
aes(x=Long,y=Lat, col=Scale),size=6,
alpha=0.75,pch=15) +
scale_color_viridis()+
xlim(c(-1,1)) +
ylim(c(51.3,51.7)) +
xlab("") +
ylab("") +
labs(tile="Grid - Scale")
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/grid_shape.png",
width=500,height=400)
ukdf + geom_point(data = grid.mle.df,
aes(x=Long,y=Lat, col=Shape),size=6,
alpha=0.75,pch=15) +
scale_color_viridis()+
xlim(c(-1,1)) +
ylim(c(51.3,51.7)) +
xlab("") +
ylab("") +
labs(title="Grid - Shape")
dev.off()
png("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionEXPLORATORY/figures/grid_scale.png",
width=500,height=400)
ukdf + geom_point(data = grid.mle.df,
aes(x=Long,y=Lat, col=Scale),size=6,
alpha=0.75,pch=15) +
scale_color_viridis()+
xlim(c(-1,1)) +
ylim(c(51.3,51.7)) +
xlab("") +
ylab("") +
labs(title="Grid - Scale")
dev.off()
rm(list=ls())
gc()
summary.model3.5 <- summary_NSD(model3.5)
?mcar
knitr::opts_chunk$set(echo = TRUE)
library(misty)
knitr::opts_chunk$set(echo = TRUE)
?mcar
library(tidyverse)
library(ggpubr)
library(rstatix)
library(readxl)
library(lme4)
library(lubridate)
library(ggplot2)
library(misty)
?mcar
??mcar
library(misty)
?na.test
data <- read_excel("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/Otros/Tesis Matias/Full_Table_Merged_v3.xlsx")
data <- read_excel("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/Otros/Tesis Matias/Full_Table_Merged_v3.xlsx")
data <- as.data.frame(data)
data$TotalSteps[which(data$TotalSteps==0)] <- NA # TMake lines with 0 steps as missing
data$TotalSteps[which(data$TotalSteps==0)] <- NA # TMake lines with 0 steps as missing
data$ID <- as.factor(as.character(data$ID))
unique.rows1 <- distinct(data[,c("ID","Date","TotalSteps")])
data.mcar <- data.frame(ID9020 = unique.rows1[which(unique.rows1$ID=="9020"),"TotalSteps"],
ID9021 = unique.rows1[which(unique.rows1$ID=="9021"),"TotalSteps"],
ID9022 = unique.rows1[which(unique.rows1$ID=="9022"),"TotalSteps"],
ID9029 = unique.rows1[which(unique.rows1$ID=="9029"),"TotalSteps"],
ID9030 = unique.rows1[which(unique.rows1$ID=="9030"),"TotalSteps"],
ID9032 = unique.rows1[which(unique.rows1$ID=="9032"),"TotalSteps"])
data.mcar
which(is.na(data.mcar), arr.ind=T)
# Perform test
na.test(data.mcar)
na.test
na.test(data.mcar[,1:3])
na.test(data.mcar[,1:2])
na.test(data.mcar[,3:4])
library(psych)
library(fda)
library(MASS)
library(mvtnorm)
library(NSD)
## Function
H0functionArma <- function(phi, dists){
if(length(phi)==1){
Ha <- -phi*dists;
H0 <- exp(Ha);
return(H0)
}else{
Ho <- diag(phi,ncol=length(phi),
nrow=length(phi))
}
}
rm(list=ls())
load("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/NSD_code/ExtNSD-work/sim_dataMU_v3.RData")
m <- 20
# k <- 1
nData <- 10
nPred <- 1
r <- 100
a.ind <- 5:(4 + m * nData)
b.ind <- (5 + m * nData):(4 + 2 * m * nData)
c.ind <- (5 + 2 * m * nData):(4 + 3 * m * nData)
d.ind <- (5 + 3 * m * nData):(4 + 4 * m * nData)
mua.ind <- (5 + 4 * m * nData):(4 + 5 * m * nData)
mub.ind <- (5 + 5 * m * nData):(4 + 6 * m * nData)
a.pred.ind <- (5 + 6 * m * nData):(4 + 6 * m * nData + m * nPred)
b.pred.ind <- (5 + 6 * m * nData + m * nPred):(4 + 6 * m * nData + 2 * m * nPred)
d.pred.ind <- (5 + 6 * m * nData + 2 * m * nPred):(4 + 6 * m * nData + 3 * m * nPred)
c.pred.ind <- (5 + 6 * m * nData + 3 * m * nPred):(4 + 6 * m * nData + 4 * m * nPred)
mua.pred.ind <- (5 + 6 * m * nData + 4 * m * nPred):(4 + 6 * m * nData + 5 * m * nPred)
mub.pred.ind <- (5 + 6 * m * nData + 5 * m * nPred):(4 + 6 * m * nData + 6 * m * nPred)
y.pred.ind <- (5 + 6 * m * nData + 6 * m * nPred):(4 + 6 * m * nData + 6 * m * nPred + r*nPred)
### Load data - grid
pm2.5day<-nc_open("D:/CAMS_EuropeanAirQualityReanalysis/ALLDAILY_CROPPED_cams.eaq.ira.2013-2022.pm2.5.nc")
pm10day<-nc_open("D:/CAMS_EuropeanAirQualityReanalysis/ALLDAILY_CROPPED_cams.eaq.ira.2013-2022.pm10.nc")
# CAMS2.5.month.mean<-ncvar_get(pm2.5.month,"MEANpm2.5")
grid2.5<-ncvar_get(pm2.5month,"MAXpm2.5")
# CAMS10.month.mean<-ncvar_get(pm10.month,"MEANpm10")
grid10<-ncvar_get(pm10.month,"MAXpm10")
### Load data - obs
aurn2.5 <- read.csv("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA/AURN_PM2p5Daily_MAX_2013-2023.CSV")
aurn10 <- read.csv("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA/AURN_PM10Daily_MAX_2013-2023.CSV")
### Calculate mles
# grid
shape.mat <- matrix("numeric", nrow=nrow(grid2.5), ncol=ncol(grid2.5))
pars.grid <- lapply(1:(nrow(grid2.5)*ncol(grid2.5)), function(x) { # moves by rows (fills row one etc)
# browser()
if(x%%ncol(grid2.5)==0){
row <- (x%/%ncol(grid2.5))
} else{
row <- (x%/%ncol(grid2.5)+1)
}
col <- x%%ncol(grid2.5)
dat <- grid2.5[row,col,]
mod <- tryCatch({
return(mev::fit.gpd(dat[which(!is.na(dat))],
threshold = quantile(dat,0.9, na.rm=T)))
},
error = function(cond){
print(x)
return(list(estimate = c(NA,NA),
std.err = c(NA,NA))
)
})
return(list(mod$estimate, mod$std.err))
})
# CAMS2.5.month.mean<-ncvar_get(pm2.5.month,"MEANpm2.5")
grid2.5<-ncvar_get(pm2.5month,"MAXpm2.5")
### Load data - grid
pm2.5day<-nc_open("D:/CAMS_EuropeanAirQualityReanalysis/ALLDAILY_CROPPED_cams.eaq.ira.2013-2022.pm2.5.nc")
library(ncdf4)
### Load data - grid
pm2.5day<-nc_open("D:/CAMS_EuropeanAirQualityReanalysis/ALLDAILY_CROPPED_cams.eaq.ira.2013-2022.pm2.5.nc")
pm10day<-nc_open("D:/CAMS_EuropeanAirQualityReanalysis/ALLDAILY_CROPPED_cams.eaq.ira.2013-2022.pm10.nc")
# CAMS2.5.month.mean<-ncvar_get(pm2.5.month,"MEANpm2.5")
grid2.5<-ncvar_get(pm2.5month,"MAXpm2.5")
# CAMS10.month.mean<-ncvar_get(pm10.month,"MEANpm10")
grid10<-ncvar_get(pm10.month,"MAXpm10")
### Load data - obs
aurn2.5 <- read.csv("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA/AURN_PM2p5Daily_MAX_2013-2023.CSV")
aurn10 <- read.csv("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA/AURN_PM10Daily_MAX_2013-2023.CSV")
nc_close(pm2.5day)
nc_close(pm10day)
### Calculate mles
# grid
shape.mat <- matrix("numeric", nrow=nrow(grid2.5), ncol=ncol(grid2.5))
# CAMS2.5.month.mean<-ncvar_get(pm2.5.month,"MEANpm2.5")
grid2.5<-ncvar_get(pm2.5month,"MAXpm2.5")
# CAMS2.5.month.mean<-ncvar_get(pm2.5.month,"MEANpm2.5")
grid2.5<-ncvar_get(pm2.5day,"MAXpm2.5")
# CAMS10.month.mean<-ncvar_get(pm10.month,"MEANpm10")
grid10<-ncvar_get(pm10day,"MAXpm10")
### Load data - grid
pm2.5day<-nc_open("D:/CAMS_EuropeanAirQualityReanalysis/ALLDAILY_CROPPED_cams.eaq.ira.2013-2022.pm2.5.nc")
pm10day<-nc_open("D:/CAMS_EuropeanAirQualityReanalysis/ALLDAILY_CROPPED_cams.eaq.ira.2013-2022.pm10.nc")
pm2.5day$var
pm2.5day$var %>% names
# CAMS2.5.month.mean<-ncvar_get(pm2.5.month,"MEANpm2.5")
grid2.5<-ncvar_get(pm2.5day,"MAXpm2.5")
# CAMS10.month.mean<-ncvar_get(pm10.month,"MEANpm10")
grid10<-ncvar_get(pm10day,"MAXpm10")
nc_close(pm2.5day)
nc_close(pm10day)
### Calculate mles
# grid
shape.mat <- matrix("numeric", nrow=nrow(grid2.5), ncol=ncol(grid2.5))
pars.grid <- lapply(1:(nrow(grid2.5)*ncol(grid2.5)), function(x) { # moves by rows (fills row one etc)
# browser()
if(x%%ncol(grid2.5)==0){
row <- (x%/%ncol(grid2.5))
} else{
row <- (x%/%ncol(grid2.5)+1)
}
col <- x%%ncol(grid2.5)
dat <- grid2.5[row,col,]
mod <- tryCatch({
return(mev::fit.gpd(dat[which(!is.na(dat))],
threshold = quantile(dat,0.9, na.rm=T)))
},
error = function(cond){
print(x)
return(list(estimate = c(NA,NA),
std.err = c(NA,NA))
)
})
return(list(mod$estimate, mod$std.err))
})
shape.grid <- lapply(pars.grid, function(x) x$estimate[2]) %>% unlist %>% matrix(nrow=nrow(grid2.5),
ncol=ncol(grid2.5)-1,
byrow=T)
scale.grid <- lapply(pars.grid, function(x) x$estimate[1]) %>% unlist %>% matrix(nrow=nrow(grid2.5),
ncol=ncol(grid2.5)-1,
byrow=T)
# obs
pars.aurn <- apply(aurn2.5[,-1], 2, function(x){
mod <- mev::fit.gpd(x[which(x>-Inf)],
threshold = quantile(x[which(x > -Inf)],0.9, na.rm=T))
return(list(mod$estimate,mod$std.err))
})
shape.aurn <- lapply(pars.aurn, function(x) x[[1]][2]) %>% unlist
scale.aurn <- lapply(pars.aurn, function(x) x[[1]][1]) %>% unlist
names.all <- lapply(strsplit(names(shape.aurn),".", fixed=T), function(x) paste0(x[1:(length(x)-1)],collapse=" ")) %>% unlist
paras.df <- data.frame(Name = names.all,
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
### Map of grid
UK <- map_data(map = "world", region = "UK", returnclass="sf")
UK2 <- df_to_SpatialPolygons(UK,"group",c("long","lat"),CRS("+init=epsg:4326")  )
shape.grid %>% dim
shape.aurn %>% dim
shape.aurn %>% length
aurn.locs
cols = brewer.pal(11, "Spectral")
file.paths<- "C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA"
aurn.locs<-read.csv(paste0(file.paths,"/AURN_locations.csv"))
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
aurn.locs2
aurn.locs2[which(!is.na(aurn.locs2$UK.AIR.ID)),] %>% dim
aurn.locs2 %>% dim
shape.aurn %>% length
aurn.locs2[which(!is.na(aurn.locs2$Shape)),] %>% dim
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape)),]
all.map <- rworldmap::getMap(resolution="high")
UK <- all.map[which(all.map$GEOUNIT=="United Kingdom"),]
plot(UK)
library(rworldmap)
library(rworldxtra)
all.map <- rworldmap::getMap(resolution="high")
UK <- all.map[which(all.map$GEOUNIT=="United Kingdom"),]
plot(UK)
shape.grid.r <- raster(shape.grid,
xmn = min(pm2.5day$dim$lon$vals),
xmx = max(pm2.5day$dim$lon$vals),
ymn = min(pm2.5day$dim$lat$vals[-101]),
ymx = max(pm2.5day$dim$lat$vals[-101]))
library(raster)
shape.grid.r <- raster(shape.grid,
xmn = min(pm2.5day$dim$lon$vals),
xmx = max(pm2.5day$dim$lon$vals),
ymn = min(pm2.5day$dim$lat$vals[-101]),
ymx = max(pm2.5day$dim$lat$vals[-101]))
scale.grid.r <- raster(scale.grid,
xmn = min(pm2.5day$dim$lon$vals),
xmx = max(pm2.5day$dim$lon$vals),
ymn = min(pm2.5day$dim$lat$vals[-101]),
ymx = max(pm2.5day$dim$lat$vals[-101]))
# Find closest cell to station
nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, shape.grid.r)
# Find closest cell to station
library(spatstat)
install.packages("spatstat")
# Find closest cell to station
library(spatstat)
nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, shape.grid.r)
library(maptools)
r.im <- as.im(shape.grid.r)
nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, r.im)
aurn.locs3$Longitude[1]
nn <- nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, r.im)
nn$col %>% length
aurn.locs3$Longitude
aurn.locs2
which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude))
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude)),]
nn <- nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, r.im)
nn
nns <- cbind(nn$row,nn$col)
shape.grid
shape.grid[nn$row,nn$col]
nn$row %>% length
grid.shape.nns <- shape.grid[nn$row,nn$col]
grid.scale.nns <- scale.grid[nn$row,nn$col]
par.df <- data.frame(shape.grid = grid.shape.nns,
scale.grid = grid.scale.nns,
shape.aurn = shape.aurn,
scale.aurn = scale.aurn)
shape.aurn
colnames(shape.aurn)
names(shape.aurn)
which(names(shape.aurn) %in% aurn.locs3$Name)
aurn.locs3$Name
names(shape.aurn)
?strsplit
strsplit(aurn.locs$Name," ")
lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs$Name <- lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude)),]
which(names(shape.aurn) %in% aurn.locs3$Name)
names(shape.aurn)
aurn.locs3$Name
file.paths<- "C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA"
aurn.locs<-read.csv(paste0(file.paths,"/AURN_locations.csv"))
lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse="."))
lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs$Name <- lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude)),]
which(names(shape.aurn) %in% aurn.locs3$Name)
aurn.locs3$Name
aurn.locs2
aurn.locs<-read.csv(paste0(file.paths,"/AURN_locations.csv"))
aurn.locs$Name <- lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
paras.df
names.all
names.all <- lapply(strsplit(names(shape.aurn),".", fixed=T), function(x) paste0(x[1:(length(x)-1)],collapse=" ")) %>% unlist
paras.df <- data.frame(Name = names.all,
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
paras.df
shape.aurn
paras.df <- data.frame(Name = names(shape.aurn),
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
paras.df
names.all <- lapply(strsplit(names(shape.aurn),".", fixed=T), function(x) paste0(x[1:(length(x)-1)],collapse=".")) %>% unlist
names.all
paras.df <- data.frame(Name = names.all,
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
aurn.locs<-read.csv(paste0(file.paths,"/AURN_locations.csv"))
aurn.locs$Name <- lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude)),]
aurn.locs3
aurn.locs3 %>% dim
par.df <- data.frame(shape.grid = grid.shape.nns,
scale.grid = grid.scale.nns,
shape.aurn = shape.aurn[which(names(shape.aurn) %in% aurn.locs3$Name)],
scale.aurn = scale.aurn)
grid.shape.nns
grid.shape.nns %>% length
grid.shape.nns <- shape.grid[nns[1,]]
grid.shape.nns
nns[1,]
grid.shape.nns <- shape.grid[nns[1,],nns[,1]]
grid.shape.nns
grid.shape.nns %>% dim
shape.grid
shape.grid[nns[1,1],nns[1,1]]
grid.shape.nns <- lapply(1:nrow(nns), function(x) {shape.grid[nns[x,1],nns[x,1]]}) %>% unlist
grid.shape.nns
grid.scale.nns <- lapply(1:nrow(nns), function(x) {scale.grid[nns[x,1],nns[x,1]]}) %>% unlist
shape.aurn[which(names(shape.aurn) %in% aurn.locs3$Name)]
names(shape.aurn)
shape.aurn <- lapply(pars.aurn, function(x) x[[1]][2]) %>% unlist
scale.aurn <- lapply(pars.aurn, function(x) x[[1]][1]) %>% unlist
names.all <- lapply(strsplit(names(shape.aurn),".", fixed=T), function(x) paste0(x[1:(length(x)-1)],collapse=".")) %>% unlist
paras.df <- data.frame(Name = names.all,
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
paras.df[which(paras.df$Name %in% aurn.locs3$Name),"Shape"] %>% dim
paras.df[which(paras.df$Name %in% aurn.locs3$Name),"Shape"] %>% length
paras.df$Name
aurn.locs3$Name
aurn.locs3$Longitude
r.im <- as.im(shape.grid.r)
nn <- nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, r.im)
nns <- cbind(nn$row,nn$col)
nns %>% dim
grid.shape.nns <- lapply(1:nrow(nns), function(x) {shape.grid[nns[x,1],nns[x,1]]}) %>% unlist
grid.scale.nns <- lapply(1:nrow(nns), function(x) {scale.grid[nns[x,1],nns[x,1]]}) %>% unlist
par.df <- data.frame(shape.grid = grid.shape.nns,
scale.grid = grid.scale.nns,
shape.aurn = paras.df[which(paras.df$Name %in% aurn.locs3$Name),"Shape"],
scale.aurn = paras.df[which(paras.df$Name %in% aurn.locs3$Name),"Scale"])
par.df
m.shape <- lm(shape.grid ~ 1 + shape.aurn, data = par.df)
plot(m.shape)
m.scale <- lm(scale.grid ~ 1 + scale.aurn, data = par.df)
m.scale
m.shape
summary(m.shape)
m.shape <- lm(shape.grid ~ 1 + shape.aurn, data = par.df)
m.scale <- lm(scale.grid ~ 1 + scale.aurn, data = par.df)
summary(m.shape)
summary(m.scale)
plot(m.shape)
qplot(par.df$shape.aurn, par.df$shape.grid,
ylab = "y", main = "Shape parameter") + stat_smooth(method = "lm")
qplot(par.df$scale.aurn, par.df$scale.grid,
ylab = "y", main = "Scale parameter") + stat_smooth(method = "lm")
save.image("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA/shape_scale_lm.RData")
getwd()
setwd("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/GTA/S2Y/Lab5")
install.packages("bookdown")
install.packages("bookdown")
library(webexercises)
install.packages("webexercises")
library(tinytex)
library(dplyr)
library(knitr)
library(ggplot2)
library(tidyverse)
library(PASWR2)
install.packages("PASWR2")
m.crime <- lm(Crime ~ Dropout, data = crime) # We add [,-1] to the end of crime to remove the first column which has non-numeric arguments (state names)
crime <- read.csv("crime.csv")
pairs(crime[,-1], lower.panel = NULL) # We add [,-1] to the end of crime to remove the first column which has non-numeric arguments (state names)
m.crime <- lm(Crime ~ Dropout, data = crime)
sumary(m.crime)
summary(m.crime)
