[["index.html", "Lab 5 - Solution 1 TASK 1", " Lab 5 - Solution 1 TASK 1 The R command pairs() may be used to see the relationships between all variables. crime &lt;- read.csv(&quot;crime.csv&quot;) pairs(crime[,-1], lower.panel = NULL) # We add [,-1] to the end of crime to remove the first column which has non-numeric arguments (state names) Apart from Dropout which has been discussed in the lectures, there may also be a positive linear relationship between Crime and Police and between Crime and Prison, though the relationship doesn't seem to be very strong. m.crime &lt;- lm(Crime ~ Dropout, data = crime) summary(m.crime) ## ## Call: ## lm(formula = Crime ~ Dropout, data = crime) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2657.7 -698.0 158.8 653.3 2132.3 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2196.5 640.0 3.432 0.00124 ** ## Dropout 281.8 60.8 4.634 2.77e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1024 on 48 degrees of freedom ## Multiple R-squared: 0.3091, Adjusted R-squared: 0.2947 ## F-statistic: 21.47 on 1 and 48 DF, p-value: 2.77e-05 beta1.hat &lt;- S_xy/S_xx beta0.hat &lt;- y_mean - beta1.hat*x_mean beta1.hat ## [1] 281.7613 beta0.hat ## [1] 2196.543 "],["task-2.html", "2 TASK 2", " 2 TASK 2 Producing a scatterplot plot(Velocity ~ Distance, data = hubble, xlab=&quot;Distance&quot;, ylab=&quot;Velocity&quot;) Fitting a simple linear regression model model_hubble &lt;- lm(Velocity ~ Distance, data = hubble) coef((model_hubble)) Producing a plot of the data including the fitted line plot(Velocity ~ Distance, data = hubble) abline(model_hubble) # Define X X &lt;- model.matrix(~ Distance, data = hubble) # Obtain XtX XtX &lt;- t(X) %*% X # Take the inverse XtX_inv &lt;- solve(XtX) # Define Y Y &lt;- hubble$Velocity # Obtain XtY XtY &lt;- t(X) %*% Y # Estimate parameters beta.hat &lt;- solve(XtX) %*% XtY # Define X X &lt;- model.matrix(~ -1 + Distance, data = hubble) # Obtain XtX XtX &lt;- t(X) %*% X # Take the inverse XtX_inv &lt;- solve(XtX) # Define Y Y &lt;- hubble$Velocity # Obtain XtY XtY &lt;- t(X) %*% Y # Estimate parameters beta.hat &lt;- solve(XtX) %*% XtY "],["task-3.html", "3 TASK 3", " 3 TASK 3 Producing a scatterplot plot(Number.of.Books ~ Year, data = books, xlab = &quot;Books&quot;, ylab = &quot;Number of books&quot;) Plotting the fitted line plot(Number.of.Books ~ Year, data = books, xlab = &quot;Books&quot;, ylab = &quot;Number of books&quot;) lines(fitted(bmodel)) "],["task-4.html", "4 TASK 4", " 4 TASK 4 # taste vs lactic acid plot(Taste ~ Lactic.Acid, data = cheese, xlab = &quot;Lactic acid concentration&quot;, ylab = &quot;Taste score&quot;) # taste vs H2S plot(Taste ~ H2S, data = cheese, xlab = &quot;H2S concentration&quot;, ylab = &quot;Taste score&quot;) # taste vs lactic acid plot(Taste ~ log(Lactic.Acid), data = cheese, xlab = &quot; Log lactic acid concentration&quot;, ylab = &quot;Taste score&quot;) # taste vs H2S plot(Taste ~ log(H2S), data = cheese, xlab = &quot;Log H2S concentration&quot;, ylab = &quot;Taste score&quot;) model &lt;- lm(Taste ~ log(H2S), data = cheese) plot(Taste ~ log(H2S), data = cheese, xlab = &quot;Log H2S concentration&quot;, ylab = &quot;Taste score&quot;) abline(model, col = &quot;red&quot;, lwd = 1.5) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
