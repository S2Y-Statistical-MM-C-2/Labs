scale.grid <- lapply(pars.grid, function(x) x$estimate[1]) %>% unlist %>% matrix(nrow=nrow(grid2.5),
ncol=ncol(grid2.5)-1,
byrow=T)
# obs
pars.aurn <- apply(aurn2.5[,-1], 2, function(x){
mod <- mev::fit.gpd(x[which(x>-Inf)],
threshold = quantile(x[which(x > -Inf)],0.9, na.rm=T))
return(list(mod$estimate,mod$std.err))
})
shape.aurn <- lapply(pars.aurn, function(x) x[[1]][2]) %>% unlist
scale.aurn <- lapply(pars.aurn, function(x) x[[1]][1]) %>% unlist
names.all <- lapply(strsplit(names(shape.aurn),".", fixed=T), function(x) paste0(x[1:(length(x)-1)],collapse=" ")) %>% unlist
paras.df <- data.frame(Name = names.all,
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
### Map of grid
UK <- map_data(map = "world", region = "UK", returnclass="sf")
UK2 <- df_to_SpatialPolygons(UK,"group",c("long","lat"),CRS("+init=epsg:4326")  )
shape.grid %>% dim
shape.aurn %>% dim
shape.aurn %>% length
aurn.locs
cols = brewer.pal(11, "Spectral")
file.paths<- "C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA"
aurn.locs<-read.csv(paste0(file.paths,"/AURN_locations.csv"))
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
aurn.locs2
aurn.locs2[which(!is.na(aurn.locs2$UK.AIR.ID)),] %>% dim
aurn.locs2 %>% dim
shape.aurn %>% length
aurn.locs2[which(!is.na(aurn.locs2$Shape)),] %>% dim
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape)),]
all.map <- rworldmap::getMap(resolution="high")
UK <- all.map[which(all.map$GEOUNIT=="United Kingdom"),]
plot(UK)
library(rworldmap)
library(rworldxtra)
all.map <- rworldmap::getMap(resolution="high")
UK <- all.map[which(all.map$GEOUNIT=="United Kingdom"),]
plot(UK)
shape.grid.r <- raster(shape.grid,
xmn = min(pm2.5day$dim$lon$vals),
xmx = max(pm2.5day$dim$lon$vals),
ymn = min(pm2.5day$dim$lat$vals[-101]),
ymx = max(pm2.5day$dim$lat$vals[-101]))
library(raster)
shape.grid.r <- raster(shape.grid,
xmn = min(pm2.5day$dim$lon$vals),
xmx = max(pm2.5day$dim$lon$vals),
ymn = min(pm2.5day$dim$lat$vals[-101]),
ymx = max(pm2.5day$dim$lat$vals[-101]))
scale.grid.r <- raster(scale.grid,
xmn = min(pm2.5day$dim$lon$vals),
xmx = max(pm2.5day$dim$lon$vals),
ymn = min(pm2.5day$dim$lat$vals[-101]),
ymx = max(pm2.5day$dim$lat$vals[-101]))
# Find closest cell to station
nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, shape.grid.r)
# Find closest cell to station
library(spatstat)
install.packages("spatstat")
# Find closest cell to station
library(spatstat)
nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, shape.grid.r)
library(maptools)
r.im <- as.im(shape.grid.r)
nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, r.im)
aurn.locs3$Longitude[1]
nn <- nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, r.im)
nn$col %>% length
aurn.locs3$Longitude
aurn.locs2
which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude))
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude)),]
nn <- nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, r.im)
nn
nns <- cbind(nn$row,nn$col)
shape.grid
shape.grid[nn$row,nn$col]
nn$row %>% length
grid.shape.nns <- shape.grid[nn$row,nn$col]
grid.scale.nns <- scale.grid[nn$row,nn$col]
par.df <- data.frame(shape.grid = grid.shape.nns,
scale.grid = grid.scale.nns,
shape.aurn = shape.aurn,
scale.aurn = scale.aurn)
shape.aurn
colnames(shape.aurn)
names(shape.aurn)
which(names(shape.aurn) %in% aurn.locs3$Name)
aurn.locs3$Name
names(shape.aurn)
?strsplit
strsplit(aurn.locs$Name," ")
lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs$Name <- lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude)),]
which(names(shape.aurn) %in% aurn.locs3$Name)
names(shape.aurn)
aurn.locs3$Name
file.paths<- "C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA"
aurn.locs<-read.csv(paste0(file.paths,"/AURN_locations.csv"))
lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse="."))
lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs$Name <- lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude)),]
which(names(shape.aurn) %in% aurn.locs3$Name)
aurn.locs3$Name
aurn.locs2
aurn.locs<-read.csv(paste0(file.paths,"/AURN_locations.csv"))
aurn.locs$Name <- lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
paras.df
names.all
names.all <- lapply(strsplit(names(shape.aurn),".", fixed=T), function(x) paste0(x[1:(length(x)-1)],collapse=" ")) %>% unlist
paras.df <- data.frame(Name = names.all,
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
paras.df
shape.aurn
paras.df <- data.frame(Name = names(shape.aurn),
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
paras.df
names.all <- lapply(strsplit(names(shape.aurn),".", fixed=T), function(x) paste0(x[1:(length(x)-1)],collapse=".")) %>% unlist
names.all
paras.df <- data.frame(Name = names.all,
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
aurn.locs<-read.csv(paste0(file.paths,"/AURN_locations.csv"))
aurn.locs$Name <- lapply(strsplit(aurn.locs$Name," "), function(x) paste0(x,collapse=".")) %>% unlist
aurn.locs2<- merge(aurn.locs, paras.df, by="Name", all=T)
aurn.locs3 <- aurn.locs2[which(!is.na(aurn.locs2$Shape) & !is.na(aurn.locs2$Longitude)),]
aurn.locs3
aurn.locs3 %>% dim
par.df <- data.frame(shape.grid = grid.shape.nns,
scale.grid = grid.scale.nns,
shape.aurn = shape.aurn[which(names(shape.aurn) %in% aurn.locs3$Name)],
scale.aurn = scale.aurn)
grid.shape.nns
grid.shape.nns %>% length
grid.shape.nns <- shape.grid[nns[1,]]
grid.shape.nns
nns[1,]
grid.shape.nns <- shape.grid[nns[1,],nns[,1]]
grid.shape.nns
grid.shape.nns %>% dim
shape.grid
shape.grid[nns[1,1],nns[1,1]]
grid.shape.nns <- lapply(1:nrow(nns), function(x) {shape.grid[nns[x,1],nns[x,1]]}) %>% unlist
grid.shape.nns
grid.scale.nns <- lapply(1:nrow(nns), function(x) {scale.grid[nns[x,1],nns[x,1]]}) %>% unlist
shape.aurn[which(names(shape.aurn) %in% aurn.locs3$Name)]
names(shape.aurn)
shape.aurn <- lapply(pars.aurn, function(x) x[[1]][2]) %>% unlist
scale.aurn <- lapply(pars.aurn, function(x) x[[1]][1]) %>% unlist
names.all <- lapply(strsplit(names(shape.aurn),".", fixed=T), function(x) paste0(x[1:(length(x)-1)],collapse=".")) %>% unlist
paras.df <- data.frame(Name = names.all,
Shape = shape.aurn,
Scale = scale.aurn, row.names = NULL)
paras.df[which(paras.df$Name %in% aurn.locs3$Name),"Shape"] %>% dim
paras.df[which(paras.df$Name %in% aurn.locs3$Name),"Shape"] %>% length
paras.df$Name
aurn.locs3$Name
aurn.locs3$Longitude
r.im <- as.im(shape.grid.r)
nn <- nearest.raster.point(aurn.locs3$Longitude, aurn.locs3$Latitude, r.im)
nns <- cbind(nn$row,nn$col)
nns %>% dim
grid.shape.nns <- lapply(1:nrow(nns), function(x) {shape.grid[nns[x,1],nns[x,1]]}) %>% unlist
grid.scale.nns <- lapply(1:nrow(nns), function(x) {scale.grid[nns[x,1],nns[x,1]]}) %>% unlist
par.df <- data.frame(shape.grid = grid.shape.nns,
scale.grid = grid.scale.nns,
shape.aurn = paras.df[which(paras.df$Name %in% aurn.locs3$Name),"Shape"],
scale.aurn = paras.df[which(paras.df$Name %in% aurn.locs3$Name),"Scale"])
par.df
m.shape <- lm(shape.grid ~ 1 + shape.aurn, data = par.df)
plot(m.shape)
m.scale <- lm(scale.grid ~ 1 + scale.aurn, data = par.df)
m.scale
m.shape
summary(m.shape)
m.shape <- lm(shape.grid ~ 1 + shape.aurn, data = par.df)
m.scale <- lm(scale.grid ~ 1 + scale.aurn, data = par.df)
summary(m.shape)
summary(m.scale)
plot(m.shape)
qplot(par.df$shape.aurn, par.df$shape.grid,
ylab = "y", main = "Shape parameter") + stat_smooth(method = "lm")
qplot(par.df$scale.aurn, par.df$scale.grid,
ylab = "y", main = "Scale parameter") + stat_smooth(method = "lm")
save.image("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/PhD/UK_airpollutionDATA/shape_scale_lm.RData")
getwd()
setwd("C:/Users/2223642C/OneDrive - University of Glasgow/Documents/GTA/S2Y/Lab5")
install.packages("bookdown")
install.packages("bookdown")
library(webexercises)
install.packages("webexercises")
library(tinytex)
library(dplyr)
library(knitr)
library(ggplot2)
library(tidyverse)
library(PASWR2)
install.packages("PASWR2")
m.crime <- lm(Crime ~ Dropout, data = crime) # We add [,-1] to the end of crime to remove the first column which has non-numeric arguments (state names)
crime <- read.csv("crime.csv")
pairs(crime[,-1], lower.panel = NULL) # We add [,-1] to the end of crime to remove the first column which has non-numeric arguments (state names)
m.crime <- lm(Crime ~ Dropout, data = crime)
sumary(m.crime)
summary(m.crime)
stopping <- read.csv("stopping.csv")
head(stopping)
stopping <- read.csv("stopping.csv")
par(mfrow=c(1,2))
par(mar=c(4,4,2,1))
plot(Distance~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Distance (in feet)")
plot(sqrt(Distance)~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Square root of distance (in feet)")
model.sqrt <- lm(sqrt(Distance) ~ Speed, data = stopping)
model.sqrt <- lm(Distance ~ Speed, data = stopping)
plot(rstandard(model.sqrt) ~ fitted(model.sqrt))
qqnorm(rstandard(model.sqrt))
qqline(rstandard(model.sqrt))
qqline(rstandard(Model2))
qqline(rstandard(model.sqrt))
qqnorm(rstandard(model.sqrt))
qqline(rstandard(model.sqrt))
qqnorm(rstandard(model.og))
model.og <- lm(Distance ~ Speed, data = stopping)
plot(rstandard(model.og) ~ fitted(model.og))
qqnorm(rstandard(model.og))
qqline(rstandard(model.og))
qqnorm(rstandard(model.og))
qqline(rstandard(model.og))
qqnorm(model.og)
qqnorm(model.og)
?qqline
model.og
qqline(rstandard(model.og))
plot(rstandard(model.sqrt) ~ fitted(model.sqrt))
plot(rstandard(model.og) ~ fitted(model.og))
plot(rstandard(model.sqrt) ~ fitted(model.sqrt))
model.sqrt <- lm(sqrt(Distance) ~ Speed, data = stopping)
plot(rstandard(model.sqrt) ~ fitted(model.sqrt))
stopping
MASS(animals)
data(animals)
library(MASS)
data(Animals)
head(Animals)
data(Animals)
Animals
Animals %>% nrow
library(dplyr)
Animals %>% nrow
coef(simple.model)
SA <- Animals[order(Animals$body), ] # sorted by body
NoDINO <- SA[-c(28:26), ] # remove dinosaurs
simple.model <- lm(log(brain) ~ log(body), data = NoDINO)
coef(simple.model)
data(SIMDATAXT)
life <- read.csv("LifeExp.csv")
head(life)
# Simulate data from a simple linear model
beta_0 <- 1
beta_1 <- 1.5
x <- runif(100)
Y <- beta_0 + beta_1*x
x.trans <- x^2
x.trans <- runif(100)
x <- x.trans^2
Y <- beta_0 + beta_1*x
plot(Y~x)
x.trans <- runif(100)
x <- x.trans^2
Y <- beta_0 + beta_1*x
plot(Y~x)
plot(Y~x.trans)
plot(Y~sqrt(x.trans))
plot(Y~sqrt(x.trans))
plot(Y~x.trans)
plot(Y~I(x.trans^0.5))
plot(Y~x.trans)
plot(Y~I(x.trans^0.5))
x.trans <- runif(100)
x <- x.trans^2
x.trans <- runif(100, min = 0, max =2)
x <- x.trans^2
Y <- beta_0 + beta_1*x
plot(Y~x.trans)
plot(Y~I(x.trans^0.5))
Y <- beta_0 + beta_1*x.trans
plot(Y~x.trans)
plot(Y~I(x.trans^0.5))
x.trans^2
# Simulate data from a simple linear model
beta_0 <- 1
beta_1 <- 1.5
x.trans <- runif(100, min = 0, max =2)
x <- x.trans^2
x <- runif(100, min = 0, max =2)
Y <- beta_0 + beta_1*x
x.trans <- runif(100, min = 0, max =2)
Y <- beta_0 + beta_1*x.trans
x <- x^2
plot(Y~x)
plot(Y~I(x^0.5))
x <- x.trans^2
plot(Y~x)
plot(Y~I(x^0.5))
plot(Y~x, pch = 16)
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^0.5), pch = 16,
, main = "After Square-root Transformation")
x.trans <- runif(100, min = 0, max =2)
Y <- beta_0 + beta_1*x.trans
x <- 1/x.trans
plot(Y~x, pch = 16,
main = "Original Scale")
# Simulate data from a simple linear model
beta_0 <- 1
beta_1 <- 1.5
x.trans <- runif(100, min = 0, max =2)
Y <- beta_0 + beta_1*x.trans
x <- sqrt(x)
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^2), pch = 16,
main = "After Reciprocal Transformation")
x.trans <- runif(100, min = 0, max =2)
Y <- beta_0 + beta_1*x.trans
x <- sqrt(x)
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^2), pch = 16,
main = "After Reciprocal Transformation")
x <- sqrt(x.trans)
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^2), pch = 16,
main = "After Reciprocal Transformation")
Y <- beta_0 + beta_1*x.trans + rnorm(n)
# Simulate data from a simple linear model
n <- 100
beta_0 <- 1
beta_1 <- 1.5
x.trans <- runif(n, min = 0, max =2)
Y <- beta_0 + beta_1*x.trans + rnorm(n)
x <- x.trans^2
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^0.5), pch = 16,
main = "After Square-root Transformation")
Y <- beta_0 + beta_1*x.trans + rnorm(n, 0, sd = 0.5)
x <- x.trans^2
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^0.5), pch = 16,
main = "After Square-root Transformation")
Y <- beta_0 + beta_1*x.trans + rnorm(n, 0, sd = 0.1)
x <- x.trans^2
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^0.5), pch = 16,
main = "After Square-root Transformation")
rm(list=ls())
library(webexercises)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(webexercises)
library(tinytex)
library(dplyr)
library(knitr)
library(ggplot2)
library(tidyverse)
library(PASWR2)
library(MASS)
library(VGAM)
# RUBBER<- Rubber
# FERTILIZE <- FERTILIZE
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
set.seed(123) # Ignore this line
# Simulate data from a simple linear model
n <- 100
beta_0 <- 1
beta_1 <- 2
x.trans <- runif(n, min = 0, max =10)
Y <- beta_0 + beta_1*x.trans + rnorm(n, 0, sd = 1)
x <- x.trans^2
par(mfrow = c(1,2))
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^0.5), pch = 16,
main = "After Square-root Transformation")
set.seed(123) # Ignore this line
# Simulate data from a simple linear model
beta_0 <- 1
beta_1 <- 1.5
x.trans <- runif(n, min = 0.2, max =2)
Y <- beta_0 + beta_1*x.trans + rnorm(n, 0, sd = 1)
x <- 1/x.trans
par(mfrow = c(1,2))
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^-1), pch = 16,
main = "After Reciprocal Transformation")
set.seed(123) # Ignore this line
# Simulate data from a simple linear model
n <- 500
beta_0 <- 1
beta_1 <- 2
x.trans <- runif(n, min = 0, max =2)
Y <- beta_0 + beta_1*x.trans + rnorm(n, 0, sd = 0.25)
x <- sqrt(x.trans)
par(mfrow = c(1,2))
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~I(x^2), pch = 16,
main = "After Quadratic Transformation")
set.seed(123) # Ignore this line
# Simulate data from a simple linear model
n <- 100
beta_0 <- 1
beta_1 <- 2
x.trans <- runif(n, min = 0, max =5)
Y <- beta_0 + beta_1*x.trans + rnorm(n, 0, sd = 1.5)
x <- exp(x.trans)
par(mfrow = c(1,2))
plot(Y~x, pch = 16,
main = "Original Scale")
plot(Y~log(x), pch = 16,
main = "After Log Transformation")
set.seed(123) # Ignore this line
# Simulate data from a simple linear model
n <- 100
beta_0 <- 1
beta_1 <- 2
x.trans <- runif(n, min = 0, max =2)
Y.trans <- beta_0 + beta_1*x.trans + rnorm(n, 0, sd = 0.5)
x <- exp(x.trans)
Y <- exp(Y.trans)
par(mfrow = c(1,2))
plot(Y~x, pch = 16,
main = "Original Scale")
plot(log(Y)~log(x), pch = 16,
main = "After Log Transformation")
library(webexercises)
stopping <- read.csv("stopping.csv")
par(mfrow=c(1,2)) # this splits your screen to obtain 1 row of figure and 2 columns
par(mar=c(4,4,2,1)) # sets margins
plot(Distance~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Distance (in feet)",
pch = 16, main = "Original Scale")
plot(Distance~I(Speed^2), data=stopping,
xlab="Squared speed (in MPH) ", ylab="Distance (in feet)",
pch = 16, main = "Transform Speed")
plot(sqrt(Distance)~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Square root of distance (in feet)",
pch = 16,"Transform Distance")
plot(sqrt(Distance)~Speed, data=stopping)
par(mfrow=c(1,3)) # this splits your screen to obtain 1 row of figure and 2 columns
par(mar=c(4,4,2,1)) # sets margins
plot(Distance~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Distance (in feet)",
pch = 16, main = "Original Scale")
plot(Distance~I(Speed^2), data=stopping,
xlab="Squared speed (in MPH) ", ylab="Distance (in feet)",
pch = 16, main = "Transform Speed")
plot(sqrt(Distance)~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Square root of distance (in feet)",
pch = 16, main = "Transform Distance")
par(mfrow=c(1,3)) # this splits your screen to obtain 1 row of figure and 2 columns
par(mar=c(4,4,2,1)) # sets margins
plot(Distance~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Distance (in feet)",
pch = 16, main = "Original Scale")
plot(Distance~I(Speed^2), data=stopping,
xlab="Squared speed (in MPH) ", ylab="Distance (in feet)",
pch = 16, main = "Transform Speed")
plot(sqrt(Distance)~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Square root of distance (in feet)",
pch = 16, main = "Transform Distance")
hist(rstandard(model.sqrt))
stopping <- read.csv("stopping.csv")
par(mfrow=c(1,3)) # this splits your screen to obtain 1 row of figure and 2 columns
par(mar=c(4,4,2,1)) # sets margins
plot(Distance~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Distance (in feet)",
pch = 16, main = "Original Scale")
plot(Distance~I(Speed^2), data=stopping,
xlab="Squared speed (in MPH) ", ylab="Distance (in feet)",
pch = 16, main = "Transform Speed")
plot(sqrt(Distance)~Speed, data=stopping,
xlab="Speed (in MPH)", ylab="Square root of distance (in feet)",
pch = 16, main = "Transform Distance")
hist(rstandard(model.og))
model.og <- lm(Distance ~ Speed, data = stopping)
hist(rstandard(model.og))
model.og$residuals
plot()
plot(model.og$residuals[1:(length(model.og$residuals)-1)],model.og$residuals[2:length(model.og$residuals)])
plot(model.og$residuals[1:(length(model.og$residuals)-1)],model.og$residuals[2:length(model.og$residuals)], xlab = "\epsilon_{i-1}")
plot(model.og$residuals[1:(length(model.og$residuals)-1)],model.og$residuals[2:length(model.og$residuals)], xlab = "\epsilon_(i-1)")
plot(model.og$residuals[1:(length(model.og$residuals)-1)],model.og$residuals[2:length(model.og$residuals)], xlab = "epsilon_(i-1)")
plot(model.og$residuals[1:(length(model.og$residuals)-1)],model.og$residuals[2:length(model.og$residuals)], xlab = "residual at time i-1", ylab="residual at time i")
plot(stopping$Speed,model.og$residuals)
